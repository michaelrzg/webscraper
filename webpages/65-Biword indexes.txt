




Biword indexes

























 Next: Positional indexes
 Up: Positional postings and phrase
 Previous: Positional postings and phrase
    Contents 
    Index




Biword indexes


One approach to handling phrases is
to consider every pair of consecutive terms in a document as a phrase.
For example, the text Friends, Romans, Countrymen would generate the
 biwords :

friends romans

romans countrymen


In this model, we treat each of these biwords as a vocabulary term.
Being able to process two-word phrase queries is immediate.
Longer phrases can be processed by breaking them down.  The query
stanford university palo alto can be broken into the Boolean query
on biwords: 

``stanford university'' AND ``university palo'' AND
``palo alto'' 


This query could be expected to work fairly well in practice, but there
can and will be occasional false positives.
Without examining the documents, we cannot verify that the documents
matching the above Boolean query do actually contain the original 4 word
phrase.


Among possible queries, nouns and noun phrases have a special status in
describing the concepts people are interested in searching for.  But
related nouns can often be divided from each other by various function
words, in phrases such as the abolition of slavery or
renegotiation of the constitution.  These needs can be
incorporated into the biword indexing model in the following way.  
First, we tokenize the text and perform part-of-speech-tagging.We can then group terms into nouns, including proper nouns, (N)
and function words, including articles and prepositions, (X), among
other classes.
Now deem any string of terms of the form NX*N to be an extended biword.
Each such extended biword is made a term in the vocabulary.
For example:


renegotiation
of
the
constitution

N
X
X
N



To process a query using such an extended biword index, we need to also
parse it into N's and X's, and then segment the query into extended
biwords, which can be looked up in the index.  


This algorithm does not always work in an 
intuitively optimal manner when 
parsing longer queries into Boolean queries. Using the above algorithm,
the query

cost overruns on a power plant


is parsed into

``cost overruns'' AND ``overruns power'' AND ``power plant''


whereas it might seem a better query to omit the middle biword.  Better results can be obtained by using more precise part-of-speech patterns that define which extended biwords should be indexed.


The concept of a biword index can be extended to longer sequences of
words, and if the index includes variable length word sequences, it is
generally referred to as a  phrase index .  Indeed, searches for
a single term are not naturally handled in a biword index (you would
need to scan the dictionary for all biwords containing the term), and so
we also need to have an index of single-word terms.
While there is always a chance of false positive matches, the chance
of a false positive match on indexed phrases of length 3 or more
becomes very small indeed.  But on the other hand, storing longer
phrases has the potential to greatly expand the vocabulary size.
Maintaining exhaustive phrase indexes for phrases of length greater
than two is a daunting prospect, and even use of an exhaustive biword
dictionary greatly expands the size of the vocabulary.  However,
towards the end of this section we discuss the utility of the strategy
of using a partial phrase index in a compound indexing scheme.















 Next: Positional indexes
 Up: Positional postings and phrase
 Previous: Positional postings and phrase
    Contents 
    Index


© 2008 Cambridge University PressThis is an automatically generated page. In case of formatting errors you may want to look at the PDF edition of the book.
2009-04-07



