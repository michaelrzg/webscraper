




The extended Boolean model versus ranked retrieval

























 Next: References and further reading
 Up: Boolean retrieval
 Previous: Processing Boolean queries
    Contents 
    Index




 

The extended Boolean model versus ranked retrieval


The Boolean retrieval model contrasts with
 ranked retrieval models  such as the vector space model (Section 6.3 ),
in which users largely use
 free text queries , that is, just
typing one or more words rather than using a precise
language with operators for building up query expressions, and the
system decides which
documents best satisfy the query.
Despite decades of academic research on the advantages of ranked retrieval,
systems implementing the Boolean retrieval model were the main or only
search option
provided by large commercial
information providers for three decades until the early 1990s (approximately the date of arrival of the World Wide Web).
However, these systems did not have just the basic Boolean operations
(AND, OR, and NOT) which we have presented so far.
A strict Boolean expression over terms with an unordered results set is
too limited for many of the information needs that people have, and these
systems implemented extended Boolean retrieval models by incorporating
additional operators such as term proximity operators.
A  proximity operator  is a way of specifying that two terms in a
query must occur close to each other in a document, where closeness may
be measured by limiting the allowed number of intervening words or by
reference to a structural unit such as a sentence or paragraph.




Worked example. Commercial Boolean searching: Westlaw.westlaw


Westlaw
(http://www.westlaw.com/) is
the largest commercial legal search service (in terms of the number of
paying subscribers), with over half a million subscribers performing
millions of searches a day over tens of
terabytes of text data.  The service was started in 1975.
In 2005, Boolean search (called ``Terms and Connectors'' by Westlaw) was
still the default,
and used by a large percentage of users, although ranked
free text querying (called ``Natural Language'' by Westlaw) was added in 1992.
Here are some example Boolean queries on Westlaw:

Information need: Information on the legal theories involved
in preventing the disclosure of trade secrets by employees formerly
employed by a competing company.
Query: "trade secret" /s disclos! /s prevent /s employe!





Information need: Requirements for disabled people to be able to
access a workplace. 
Query: disab! /p access! /s work-site work-place (employment /3 place)








Information need: Cases about a host's responsibility for drunk guests.
Query: host! /p (responsib! liab!) /p (intoxicat! drunk!) /p guest


Note the long, precise
queries and the use of proximity operators, both uncommon in web search.
Submitted queries average about ten words in length.
Unlike web search conventions, a space between words represents
disjunction (the tightest binding operator), & is AND and /s,
/p, and / ask for matches in the same sentence, same paragraph or
within  words respectively.  Double quotes give a  phrase search 
(consecutive words); see Section 2.4 (page ). The exclamation mark (!) gives a
trailing wildcard query wildcard; thus liab! matches all
words starting with liab.  Additionally work-site
matches any of worksite, work-site or work site;
see Section 2.2.1 (page ).
Typical expert
queries are usually carefully defined and incrementally developed until
they obtain what look to be good results to the user.


Many users, particularly professionals, prefer Boolean query models.
Boolean queries are precise: a document either matches the query or it
does not.  This offers the user greater control and transparency
over what is
retrieved.  And some domains, such as legal materials, allow an effective
means of document ranking within a Boolean model: Westlaw returns
documents in reverse chronological order, which is in practice quite
effective.  In 2007, the majority of law librarians still seem to
recommend terms and connectors for high recall searches, and the majority of
legal users think they are getting greater control by using them.
However, this does not mean that Boolean queries are more
effective for professional searchers. Indeed, experimenting on a Westlaw
subcollection, Turtle (1994)
found that free text queries produced better results than Boolean
queries prepared by Westlaw's own reference librarians for the majority
of the information needs in his experiments.  A general problem with
Boolean search is that using AND operators tends to produce
high precision but low recall searches, while using OR
operators gives low precision but high recall searches, and it is
difficult or impossible to find a satisfactory middle ground.
End worked example.

In this chapter, we have looked at the structure and construction of a
basic inverted index, comprising a dictionary and postings lists.
We introduced the Boolean retrieval model, and examined how to do
efficient retrieval via linear time merges and simple query optimization.
In dictionaryranking-ir-system we will consider in
detail richer query models and
the sort of augmented index structures that are needed to handle them
efficiently.  Here we just mention a few of the main additional things
we would like to be able to do:


We would like to better determine the set of terms in the
  dictionary and to provide retrieval that is tolerant to spelling
  mistakes and inconsistent choice of words.



It is often useful to search for compounds or phrases that denote a
concept such as ``operating system''.  As the Westlaw examples
show, we might
also wish to do proximity queries such as
Gates near Microsoft.  To answer such queries, the
index has to be augmented to capture the proximities of terms
in documents.



A Boolean model only records term presence or absence, but often
we would like to accumulate evidence, giving more weight to documents that have
a term several times as opposed to ones that contain it only once. To
be able to do this we need  term frequency  information (the number of
times a term occurs in a document) in postings lists.



Boolean queries just retrieve a set of matching
documents, but commonly we wish to have an effective method to order
(or ``rank'') the returned results.  This requires having a mechanism
for determining a document score which encapsulates how good a match a
document is for a query.





With these additional ideas, we will have seen most of the basic
technology that supports ad hoc searching over unstructured information.
Ad hoc searching over documents has recently
conquered the world, powering not only web search engines but the kind
of unstructured search that lies behind the large eCommerce websites.
Although the main web search engines differ by emphasizing
 free text
querying , most of the basic issues and technologies of
indexing and querying remain the same, as we will see in later chapters.
Moreover, over time, web
search engines have added at least partial implementations of some of
the most popular operators from extended Boolean models: phrase search
is especially popular and most have a very partial implementation
of Boolean operators.  Nevertheless, while these options are liked by
expert searchers, they are little used by most people and are not the
main focus in work on trying to improve web search engine performance.


Exercises.

Write a query using Westlaw syntax which would find any of the words professor, teacher, or lecturer in the same sentence as a form of the verb explain.



Try using the Boolean search features on a couple of major web search
engines.  For instance, choose a word, such as burglar, and
submit the queries (i) burglar, (ii) burglar AND
  burglar, and (iii) burglar OR burglar.  Look at the
estimated number of results and top hits.  Do they make sense in terms of Boolean
logic?  Often they haven't for major search engines.  Can you make
sense of what is going on?  What about if you try different words?
For example, query for (i) knight, (ii) conquer, and
then (iii) knight OR conquer. What bound should the number of
results from the first two queries place on the third query?  Is this
bound observed?


















 Next: References and further reading
 Up: Boolean retrieval
 Previous: Processing Boolean queries
    Contents 
    Index


© 2008 Cambridge University PressThis is an automatically generated page. In case of formatting errors you may want to look at the PDF edition of the book.
2009-04-07



